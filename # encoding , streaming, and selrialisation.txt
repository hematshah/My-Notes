# encoding , streaming, and selrialisation 


we are going to discuss a nerw section of the course where we look at getting
data acrosss the internet.


encoding - how files arte created and interpreted

streaming - sending BLOCKS OF DATA across the internet for processing

Serialisation - turn raw data into C# known data type eg.MyCLass instance


#Encoding

Hard disk  101010101010
   
    patterns
    FLags

    SOF Start Of File 'flag' on hard disk
    Signature which is a pattern of '1' and '0' which tell us WHICH FILE TYPE
    WE ARE ABOUT TO LOOK AT

    JPG JPEG    Joint Poto Expert Group
    PNG         PORTABLE NETWORK GRAPHIC

    JPG    has FILE SIGNATURE   FF D8 ...

                                 BINARY 1 OR 0
                                 BYTE   10101010
                                 NIBBLE 1010
                                 Hex    10100000  10 A
                                        10110000  11 B
                                        11000000  12 C
                                        11010000  13 D

# ASCII

 when the first computers were built we needed a way to transfer human vharacters into computer- storable characters. Computers only storw binary 1/0 and so we created the ASCII table which maps every character with a number

    G==> 71
    g ==>103

    today whenever we hit these keys, this number is sent to the computer.
    
    ASCII has max 127 ie binary numbers 7 digits from 0000000 to 1111111 can make all the characters G == 71 == 1000111


# Modern Web today UTF-8

If we add one or more digit to ASCII (7 digits) we create UTF-8 which has 8 digits

This is nice and simple as computers LOVE power of 2

In fact the WEB IS WRITTEN WITH ASCII CHARACTER + EXTRA DIGIT (UTF8)

   Proof ==> GetBootstrap.com



 # UNICODE : UTF-16
 
   we notice however that many languages of the world are not catered for by our simple



 # .NET / C#

     Web - Default 8 bit
     General - 8 bit
     But can be programmes to use 16 bit encoding



# Streaming And Serialisation

   if we want to pull down data from remote location we can do so by in a number of ways:

   FILEv SYSTEM

   	HTTP ://  WEB

   	MEMORY   RAM IN LOCAL COMPUTER

   	OTHER NETWORK LOCATIONS SUCH AS 
   	 FILEC SHARE SMB://
   	 EMAIL  SMTP /POP/IMAP
     FTP:// SENDING  FILES
     IP
     TCP/IP INTERNET

     IN ORDER TO HELP USE GET DATA PROPERLYH WE SPLIT IT INTO TWO TYPES


        BINARY 

            RAW STRING OF 1/0
             .EXE
             .JPG
             .DLL


             BINARY FILES ARE VERY FAST (RAW. 1/0) BUT HAVE TO BE INTERPRETED VIA APPLICATION

             DECODING



             IDE = BUILD ENVIRONMENT
                 2)   COMPILE IT      A) DEBUG (SLOWER)   .EXE /.DLL
                         
                                      B) RELEASE (FASTER)  .EXE/ .DLL
                       3) RUN IT      EITHER IDE OR ACTUALLY THE OS (WINDOWS)


        TEXT.BASED FILE
              
              .HTML
                 <html><head></head> <body></body>  </html>

                 .xml
                    <rootELement>
                        <row>
                            <column data ="1">data2</column>
                         </row>
                         <row>
                            <column data="1">data2</column>   
                         </row> 
                    </rootElement>   
                    
              .json  Javascript object notation
              
              .json JAVASCRIPT OBJECT NOTATION
                 {
                     "field1" : "data1"
                     "field2" : "data2"
                     "field3" : 100,
                     "field4" : true
                     "field5" : "2019-11-07"

                 }


                 .json ARRAY OF OBJECTS
                 [
                      {"field2" : "data1"....},
                      {},
                      {},

                 ]




























